#include <stdio.h>
#include <time.h>
#include <stdlib.h>
#include <math.h>
#include <assert.h>

int Glo_Max_Arr_Val();
int Glo_Max_Arr_Pos();
int Glo_Random();
int Glo_Num_of_Pop();
void Glo_Input_A();
void Glo_Input_B();
void Glo_Gen_End();
void Glo_Gen_Same();
void Glo_Print_1D_Arr();
void Glo_Print_2D_Arr();
void Glo_Copy_1D_Arr();
void Glo_Copy_2D_Arr();

void Gen_Generate();

void Parent_select();

int Fit_Sum();
int Fit_Value_Of_List();
void Fit_Total_Value();

int Muta_Check_Array();
void Muta_Swap();
void Muta_Mutation();

void Cross_Partition_Of_List();
void Cross_Copy_Arr();
void Cross_Swap();
void Cross_Cross();
void Cross_Crossover();

void Eli_Insert();
void Eli_Top();
void Eli_Low();
void Eli_Set_Array_To();
void Eli_Copy();
void Eli_Add_Eli();
void Eli_Elitism_Top();
void Eli_Elitism_Low();
void Eli_Elitism_Swap();
void Eli_Compare();
void Eli_Elitism_After();

int main()
{
    srand(time(NULL));
    int pop;
    int colu;
    int max_weight;
    int fix_one;
    int number_of_run = 10;
    Glo_Input_A(&colu, &max_weight);
    int top_of_run[20];
    int top_of_list[20][colu];
    int value[colu];
    int weight[colu];
    long int total_weight = 0;
    Glo_Input_B(colu, max_weight, &total_weight, value, weight);
    fix_one = ceil(max_weight * colu / total_weight) + 1;
    pop = Glo_Num_of_Pop(colu);
    printf(".............................................................................\n");
    for (int round = 0; round < number_of_run; round++)
    {
        int gen_list[pop][colu];
        int stop = 0;
        int gen = 1;
        int count_same = 0;
        int gen_top;
        int list_top[colu];
        Gen_Generate(colu, pop, gen_list, fix_one);
        do
        {
            int num_of_eli = ceil((double)5 * (double)pop / (double)100);
            int same = 10000;
            int num_of_low = 0;
            int total_value[pop];
            int parent[pop][colu];
            int elitism[num_of_eli][colu];
            int top_value[2][num_of_eli];
            int low_value[2][num_of_eli];
            long long sum_of_value = 0;
            Fit_Total_Value(pop, colu, gen_list, total_value, max_weight, value, weight);
            sum_of_value = Fit_Sum(pop, total_value);
            Eli_Elitism_Top(pop, colu, gen_list, total_value, 2, num_of_eli, top_value, elitism);
            Glo_Gen_Same(&count_same, gen_top, top_value[1][0]);
            gen_top = top_value[1][0];
            Eli_Set_Array_To(0, colu, list_top);
            Glo_Copy_1D_Arr(colu, list_top, elitism[0]);
            Parent_select(pop, colu, gen_list, total_value, sum_of_value, parent);
            Glo_Copy_2D_Arr(pop, colu, gen_list, parent);
            Cross_Crossover(pop, colu, gen_list);
            Muta_Mutation(pop, colu, gen_list);
            Muta_Mutation(pop, colu, gen_list);
            Fit_Total_Value(pop, colu, gen_list, total_value, max_weight, value, weight);
            Eli_Elitism_After(pop, colu, gen_list, total_value, num_of_eli, &num_of_low, top_value, low_value, elitism);
            Glo_Gen_End(gen, &stop, same, count_same);
            if (stop != 1)
                gen++;
        } while (stop != 1);
        top_of_run[round] = gen_top;
        Glo_Copy_1D_Arr(colu, top_of_list[round], list_top);
        printf("Round : %d\n", round + 1);
        printf("Most value of round %d : %d\n", round + 1, top_of_run[round]);
        printf("List of most value     : ");
        Glo_Print_1D_Arr(colu, top_of_list[round]);
        printf(".............................................................................\n");
    }
    printf("\n\n------------------------------------------------------------------------------------------------------\n");
    printf("Each round value : ");
    Glo_Print_1D_Arr(number_of_run, top_of_run);
    printf("Most value : %d\n", Glo_Max_Arr_Val(top_of_run, number_of_run));
    printf("Most list : ");
    Glo_Print_1D_Arr(colu, top_of_list[Glo_Max_Arr_Pos(top_of_run, number_of_run)]);
    printf("------------------------------------------------------------------------------------------------------\n");

    printf("\nEnd Program.\n\n");

    printf("\nWriting Program by : \n\n");

    printf("+-----------------------------------------------------+\n");
    printf("|                      CPE KMUTT                      |\n");
    printf("|                  ALGORITHM DESIGN                   |\n");
    printf("+-----------------------------------------------------+\n");
    printf("|   Knapsack Problem with Genetic Algorithm Project   |\n");
    printf("+-----------------------------------------------------+\n");
    printf("|     1. 63070501017 Mr. Natad       Suwannapong      |\n");
    printf("|     2. 63070501028 Mr. Tittawat    Jai-ou           |\n");
    printf("|     3. 63070501048 Mr. Passakorn   Klaikaew         |\n");
    printf("|     4. 63070501062 Mr. Supamongkol Kidrungruang     |\n");
    printf("|     5. 63070501064 Mr. Suphawit    Sanitphon        |\n");
    printf("+-----------------------------------------------------+\n\n");
    return 0;
}

int Glo_Max_Arr_Val(int arr[], int n)
{
    int max = INT_MIN;
    for (int i = 0; i < n; i++)
    {
        if (max < arr[i])
            max = arr[i];
    }
    return max;
}

int Glo_Max_Arr_Pos(int arr[], int n)
{
    int max = INT_MIN;
    int pos;
    for (int i = 0; i < n; i++)
    {
        if (max < arr[i])
        {
            max = arr[i];
            pos = i;
        }
    }
    return pos;
}

int Glo_Random(int min, int max)
{
    if ((max - 1) == RAND_MAX)
        return rand();
    else
    {
        assert(max <= RAND_MAX);
        int end = RAND_MAX / max;
        assert(end > 0);
        end *= max;
        int r;
        while ((r = rand()) >= end)
            ;

        return (r % max) + min;
    }
}

int Glo_Num_of_Pop(int colu)
{
    int pop;
    if (colu <= 50)
        pop = 30;
    else if (colu > 50 && colu <= 500)
        pop = 100;
    else if (colu > 500)
        pop = 100;
    return pop;
}

void Glo_Input_A(int *colu, int *max_weight)
{
    int size;
    int max_wei;
    scanf("%d %d", &size, &max_wei);
    *colu = size;
    *max_weight = max_wei;
}

void Glo_Input_B(int colu, int max_weight, long int *total_weight, int value[], int weight[])
{
    int val[colu];
    int wei[colu];
    for (int i = 0; i < colu; i++)
    {
        scanf("%d %d", &val[i], &wei[i]);
        *total_weight += wei[i];
    }
    Glo_Copy_1D_Arr(colu, value, val);
    Glo_Copy_1D_Arr(colu, weight, wei);
}

void Glo_Gen_End(int gen, int *stop, int same, int count_same)
{
    if (gen >= 20000)
        *stop = 1;
    else if (same == count_same)
        *stop = 1;
}

void Glo_Gen_Same(int *count_same, int gen_top, int key)
{
    if (gen_top == key)
        *count_same = *count_same + 1;
    else
        *count_same = 0;
}

void Glo_Print_1D_Arr(int list_size, int Carr[])
{
    for (int i = 0; i < list_size; i++)
        printf("%d ", Carr[i]);
    printf("\n");
}

void Glo_Print_2D_Arr(int pop, int size, int arr[pop][size])
{
    for (int i = 0; i < pop; i++)
    {
        for (int j = 0; j < size; j++)
            printf("%d ", arr[i][j]);
        printf("\n");
    }
}

void Glo_Copy_1D_Arr(int size, int a[], int b[])
{
    for (int i = 0; i < size; i++)
        a[i] = b[i];
}

void Glo_Copy_2D_Arr(int pop, int size, int a[pop][size], int b[pop][size])
{
    for (int i = 0; i < pop; i++)
        Glo_Copy_1D_Arr(size, a[i], b[i]);
}

void Gen_Generate(int n, int m, int array[m][n], int fix_one)
{
    int pos = 0;
    int row = m;
    int column = n;
    int check = 0;
    int time = 0;
    int number_of_one = 0;
    for (int i = 0; i < row; i++)
    {
        for (int j = 0; j < column; j++)
            array[i][j] = 0;
        number_of_one = fix_one;
        if (number_of_one == 0)
            number_of_one = 1;
        for (int j = 0; j < number_of_one; j++)
        {
            pos = Glo_Random(0, n);
            if (array[i][pos] == 0)
                array[i][pos] = 1;
            else
                j--;
        }
    }
    int flag = 0;
    for (int i = 1; i < row; i++)
        time = time + i;
    do
    {
        if (check < time)
            check = 0;
        for (int i = 0; i < row; i++)
        {

            for (int j = i + 1; j < row; j++)
            {
                flag = 0;
                for (int k = 0; k < column && flag == 0; k++)
                {
                    if (array[i][k] != array[j][k])
                    {
                        flag = 1;
                        check = check + 1;
                    }
                }
                if (flag == 0)
                {
                    for (int k = 0; k < column; k++)
                        array[j][k] = Glo_Random(0, 2);
                }
            }
        }
    } while (check < time);
}

void Parent_select(int pop, int size, int list[pop][size], int fit_value[], long long FitSum, int parent[pop][size])
{
    int pos = 0;
    int previous_pos = 0;
    for (int i = 0; i < pop; i++)
    {
        pos = Glo_Random(0, pop);
        if (i > 0 && previous_pos == pos)
            i--;
        else
            Glo_Copy_1D_Arr(size, parent[i], list[pos]);
        previous_pos = pos;
    }
}

int Fit_Sum(int line, int arr[])
{
    int sum;
    for (int i = 0; i < line; i++)
        sum = sum + arr[i];
    return sum;
}

int Fit_Value_Of_List(int size, int max_weight, int arr[], int value[], int weight[])
{
    int total_value = 0;
    int total_weight = 0;
    for (int i = 0; i < size; i++)
    {
        if (arr[i] == 1)
        {
            total_value = total_value + value[i];
            total_weight = total_weight + weight[i];
        }
    }
    if (total_weight > max_weight)
        total_value = 0;
    return total_value;
}

void Fit_Total_Value(int line, int size, int list[line][size], int total_value[], int max_weight, int value[], int weight[])
{
    for (int i = 0; i < line; i++)
        total_value[i] = Fit_Value_Of_List(size, max_weight, list[i], value, weight);
}

int Muta_Check_Array(int arr[], int key, int arr_size)
{
    int check = 0;
    for (int i = 0; i < arr_size; i++)
        if (arr[i] == key)
            check++;
    return check;
}

void Muta_Swap(int lis[], int r)
{
    if (lis[r] == 0)
        lis[r] = 1;
    else
        lis[r] = 0;
}

void Muta_Mutation(int line, int size, int list[line][size])
{
    int num_of_ran = ceil(((double)0.35 / (double)100) * (double)size);
    int per = ceil(((double)2 / (double)100) * (double)line);
    int ran_arr[num_of_ran];
    int ran_line[per];
    int temp_ran;
    for (int k = 0; k < per; k)
    {
        int x = Glo_Random(0, line);
        if (Muta_Check_Array(ran_line, x, k) == 0)
        {
            ran_line[k] = x;
            for (int i = 0; i < num_of_ran; i)
            {
                temp_ran = Glo_Random(0, size);
                if (Muta_Check_Array(ran_arr, temp_ran, i) == 0)
                {
                    ran_arr[i] = temp_ran;
                    i++;
                }
            }
            for (int i = 0; i < num_of_ran; i++)
                Muta_Swap(list[x], ran_arr[i]);
            k++;
        }
    }
}

void Cross_Partition_Of_List(int parti[], int *parti_size, int list_size)
{
    int temp = list_size;
    int i = 1;
    int range;
    int ran = 0;
    if (list_size <= 1)
        ;
    else if (list_size < 2)
        range = 1;
    else if (list_size <= 6)
        range = 2;
    else if (list_size <= 10)
        range = 3;
    else
        range = 4;
    for (i = 0; ran <= temp; i++)
    {
        parti[i] = ran;
        *parti_size = *parti_size + 1;
        temp = temp - parti[i];
        ran = Glo_Random(1, range);
    }
    if (temp > 0)
    {
        parti[i] = temp;
        *parti_size = *parti_size + 1;
    }
}

void Cross_Copy_Arr(int li_a, int li_b, int size, int a[li_a][size], int b[li_b][size])
{
    for (int i = 0; i < size; i++)
        a[li_a][i] = b[li_b][i];
}

void Cross_Swap(int la, int lb, int line, int size, int list[line][size], int temp[2][size], int parti[], int parti_size)
{
    for (int state = 0; state < 2; state++)
    {
        if (state == 0)
        {
            int count = 0;
            for (int i = parti_size - 1; i >= 1; i--)
            {
                if (i % 2 == 0)
                {
                    int count_com = count;
                    for (int x = count; x < parti[i] + count_com; x++, count++)
                        temp[0][x] = list[lb][x];
                }
                else
                    for (int x = 0; x < parti[i]; x++, count++)
                        ;
            }
        }
        if (state == 1)
        {
            int count = 0;
            for (int i = parti_size - 1; i >= 1; i--)
            {
                if (i % 2 == 0)
                {
                    int count_com = count;
                    for (int x = count; x < parti[i] + count_com; x++, count++)
                        temp[1][x] = list[la][x];
                }
                else
                    for (int x = 0; x < parti[i]; x++, count++)
                        ;
            }
        }
    }
}

void Cross_Cross(int a, int b, int line, int size, int bi, int list[line][size])
{
    int parti[50000] = {0, 1};
    int parti_size = 0;
    int li[2] = {0, 1};
    int temp[bi][size];
    Cross_Partition_Of_List(parti, &parti_size, size);
    Cross_Copy_Arr(li[0], a, size, temp, list);
    Cross_Copy_Arr(li[1], b, size, temp, list);
    Cross_Swap(a, b, line, size, list, temp, parti, parti_size);
    Cross_Copy_Arr(a, li[0], size, list, temp);
    Cross_Copy_Arr(b, li[1], size, list, temp);
}

void Cross_Crossover(int line, int size, int list[line][size])
{
    for (int i = 0; i < line; i = i + 2)
        Cross_Cross(i, i + 1, line, size, 2, list);
}

void Eli_Insert(int pos, int key, int size, int arr[])
{
    int temp[size];
    Glo_Copy_1D_Arr(size, temp, arr);
    arr[pos] = key;
    for (int i = pos + 1; i < size; i++)
        arr[i] = temp[i - 1];
}

void Eli_Top(int line, int total_value[], int lia, int num_of_top, int max[lia][num_of_top])
{
    int state = 0;
    int i, j;
    for (i = 0; i < line; i++)
    {
        for (j = 0; j < num_of_top; j++)
        {
            if ((total_value[i] > max[1][j]) && (state == 0))
            {
                Eli_Insert(j, total_value[i], num_of_top, max[1]);
                Eli_Insert(j, i, num_of_top, max[0]);
                state = 1;
            }
        }
        state = 0;
    }
}

void Eli_Low(int line, int total_value[], int lia, int num_of_low, int min[lia][num_of_low])
{
    int state = 0;
    int i, j;
    for (i = 0; i < line; i++)
    {
        for (j = 0; j < num_of_low; j++)
        {
            if ((total_value[i] < min[1][j]) && (state == 0))
            {
                Eli_Insert(j, total_value[i], num_of_low, min[1]);
                Eli_Insert(j, i, num_of_low, min[0]);
                state = 1;
            }
        }
        state = 0;
    }
}

void Eli_Set_Array_To(int key, int num, int arr[])
{
    for (int i = 0; i < num; i++)
        arr[i] = key;
}

void Eli_Copy(int line, int size, int list[line][size], int total_value[], int lia, int num_of_top, int max[lia][num_of_top], int elitism[num_of_top][size])
{
    for (int i = 0; i < num_of_top; i++)
    {
        for (int j = 0; j < size; j++)
        {
            Cross_Copy_Arr(i, max[0][i], size, elitism, list);
            if (max[0][i] == -1)
                Eli_Set_Array_To(0, size, elitism[i]);
        }
    }
}

void Eli_Add_Eli(int li, int size, int temp[li][size * 2], int a[li][size], int b[li][size])
{
    for (int i = 0; i < li; i++)
        for (int j = 0; j < size; j++)
            temp[i][j] = a[i][j];
    for (int i = 0; i < li; i++)
        for (int j = 0; j < size; j++)
            temp[i][size + j] = b[i][j];
}

void Eli_Elitism_Top(int line, int size, int list[line][size], int total_value[], int lia, int num_of_top, int max[lia][num_of_top], int elitism[num_of_top][size])
{
    Eli_Set_Array_To(-1, num_of_top, max[0]);
    Eli_Set_Array_To(0, num_of_top, max[1]);
    Eli_Top(line, total_value, 2, num_of_top, max);
    Eli_Copy(line, size, list, total_value, 2, num_of_top, max, elitism);
}

void Eli_Elitism_Low(int line, int size, int list[line][size], int total_value[], int lia, int num_of_low, int min[lia][num_of_low], int elitism[num_of_low][size])
{
    Eli_Set_Array_To(-1, num_of_low, min[0]);
    Eli_Set_Array_To(1000000, num_of_low, min[1]);
    Eli_Low(line, total_value, 2, num_of_low, min);
}

void Eli_Elitism_Swap(int num_of_low, int num_of_eli, int line, int size, int list[line][size], int elitism[num_of_eli][size], int min[])
{
    for (int i = 0; i < num_of_low; i++)
        Cross_Copy_Arr(min[i], i, size, list, elitism);
}

void Eli_Compare(int num_of_eli, int *num_of_low, int max[], int min[])
{
    *num_of_low = num_of_eli;
    int state = 0;
    for (int i = 0; i < num_of_eli; i++)
    {
        for (int j = 0; j < num_of_eli; j++)
        {
            if ((min[i] > max[j]) && (state == 0))
            {
                *num_of_low = *num_of_low - 1;
                state = 1;
            }
        }
        state = 0;
    }
}

void Eli_Elitism_After(int line, int size, int list[line][size], int total_value[], int num_of_eli, int *num_of_low, int max[2][num_of_eli], int min[2][num_of_eli], int elitism[num_of_eli][size])
{
    int pla;
    Eli_Elitism_Low(line, size, list, total_value, 2, num_of_eli, min, elitism);
    Eli_Compare(num_of_eli, &pla, max[1], min[1]);
    *num_of_low = pla;
    Eli_Elitism_Swap(pla, num_of_eli, line, size, list, elitism, min[0]);
}
